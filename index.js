/*You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.
*/
/*
 * @param {string} s
 * @param {string} t
 * @return {character}
 */
const findTheDifference = function(s, t) {
  const sumS = s.split('')
                 .reduce((sum, letter, index) => sum + letter.charCodeAt(0), 0);
  const sumT = t.split('')
                 .reduce((sum, letter, index) => sum + letter.charCodeAt(0), 0);

  return String.fromCharCode(Math.abs(sumT - sumS));
};
console.log(findTheDifference("abc", "acbd"));

/*
 * @param {number[]} nums
 * @return {number}
 Given a non-empty array of integers nums,
 every element appears twice except for one.
 Find that single one.
 */
const singleNumber = function(nums) {
  return nums
   .sort((a, b) => a - b)
   .find((num, index, arr) => arr.indexOf(num) === arr.lastIndexOf(num));
};
console.log(singleNumber([4,1,2,1,2]));

/*
 * @param {number[]} nums
 * @return {number}
 Given an array nums containing n distinct numbers
 in the range [0, n], return the only number
 in the range that is missing from the array.
 */
const missingNumber = function(nums) {
  let missNumber = nums.sort((a, b) => a-b)
                         .findIndex((number, index) => number != index);

  if (missNumber === -1) {
    return nums.length;
  }
  else {
    return missNumber;
  }
};
console.log(missingNumber([9,6,4,2,3,5,7,8,1]));

/*A transaction is possibly invalid if:

the amount exceeds $1000, or;
if it occurs within (and including) 60 minutes of another transaction with the same name in a different city.*/

/*
 * @param {string[]} transactions
 * @return {string[]}
 */
var invalidTransactions = function(transactions) {
  let invalidTransactionsByAmount = transactions.filter(transaction => {
    let [ , , amount, ] = transaction.split(',');

    if (amount > 1000) {
      return true;
    }
    else {
      return false;
    }
  });
  let invalidTransactionsByTime = transactions.filter((transaction, index) => {
    let [ name, time, amount, city] = transaction.split(',');

    if (transactions[index - 1] && transactions[index + 1]){
      let [nameLast, timeLast, , cityLast] = transactions[index - 1].split(',');
      let [nameNext, timeNext, , cityNext] = transactions[index + 1].split(',');

      if (((name === nameLast) && (city != cityLast) && (time - timeLast < 60))
         || ((name === nameNext) && (city != cityNext) && (timeNext - time < 60))){
        return true;
      }
      else {
        return false;
      }
    }
    else if (transactions[index - 1]){
      let [nameLast, timeLast, , cityLast] = transactions[index - 1].split(',');

      if ((name === nameLast) && (city != cityLast) && (time - timeLast < 60)){
        return true;
      }
      else {
        return false;
      }
    }
    else if (transactions[index + 1]){
      let [nameNext, timeNext, , cityNext] = transactions[index + 1].split(',');

      if ((name === nameNext) && (city != cityNext) && (timeNext - time < 60)){
        return true;
      }
      else {
        return false;
      }
    }
    else {
      return false;
    }
  });
  const allInvalidTransactions = invalidTransactionsByAmount
                                  .concat(invalidTransactionsByTime)
                                  .filter((transaction, index, arr) => arr.indexOf(transaction) === index);

  return allInvalidTransactions;
};
console.log(invalidTransactions(["alice,20,800,mtv","alice,50,100,mtv","alice,50,120,mtv"]));

/*
 * @param {number[]} nums
 * @return {number}
 */
const findDuplicate = function (nums) {
  return nums
    .sort((a, b) => a - b)
    .find((num, index, arr) => num === arr[index + 1]);
};
console.log(findDuplicate([2, 2, 2, 2, 2]));

/*
* @param {numbers[]} prices
* @return {number}
*/
const arr = [7,5,1,3,9,4];

 function maxProfit(prices) {
    let min = Infinity;
    let initialPrice = 0;
    let timeToSell = false;
    let profit = 0;
    for (let i = 0; i < prices.length; i++){
        if (timeToSell) {
            if(prices[i+1] < prices[i] || prices[i+1] === undefined) {
                profit += prices[i] - initialPrice;
                min = prices[i];
                timeToSell = false;
                initialPrice = 0;
            }
        } else if (min > prices[i]) {
            min = prices[i];
            if(prices[i+1] >= prices[i]) {
                initialPrice = min;
                timeToSell = true;
            }
        }
    }
    return profit;
};
console.log(maxProfit(arr));

/*
* @param {numbers[]} arr
* @return {numbers[]}
*
*/
const numArray = [0, 1, 3, 5, 5, 6, 6, 6, 7, 8, 9, 9];
const removeDublicates = arr => {
  if (arr.length === 0) return 0;
  let i = 0;
  let j = 1;
  while ( j < arr.length) {
    if (arr[i] !== arr[j]) {
      i++;
      arr[i] = arr[j];
      j++;
    }
    else j++;
  };
  return arr.slice(0, i + 1);
};
console.log(removeDublicates(numArray));

